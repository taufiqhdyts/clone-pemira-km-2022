// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  CANDIDATE
  ADMIN
}

model User {
  id            String     @id @default(uuid())
  nim           String     @unique
  email_itb     String     @unique
  email_non_itb String
  long_name     String
  short_name    String
  fakultas      String
  role          Role       @default(USER)
  candidate     Candidate?
  Vote          Vote[]
}

enum CandidateType {
  K3M
  MWAWM
}

model Candidate {
  id         String        @id @default(uuid())
  account    User          @relation(fields: [account_id], references: [id])
  account_id String        @unique
  point      Int           @default(0)
  password   String
  nomor_urut Int
  type       CandidateType

  Challenge   Challenge[]
  Pelanggaran Pelanggaran[]
  Vote        Vote[]
}

model Admin {
  id       String @id @default(uuid())
  password String
  username String
}

enum Progress {
  BELUM_DISETUJUI_ADMIN_DAN_KANDIDAT
  BELUM_DISETUJUI_ADMIN
  BELUM_DISETUJUI_KANDIDAT
  DISETUJUI
  REJECTED
}

model Challenge {
  id               String           @id @default(uuid())
  judul            String
  sender_name      String
  sender_ktm_url   String
  candidate        Candidate        @relation(fields: [candidate_id], references: [id])
  candidate_id     String
  payload          String
  progress         Progress         @default(BELUM_DISETUJUI_ADMIN_DAN_KANDIDAT)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  challenge_answer ChallengeAnswer?
}

enum ResponsePelanggaran {
  ON_REVIEW
  ACCEPTED
  REJECTED
}

model ChallengeAnswer {
  id           String    @id @default(uuid())
  challenge    Challenge @relation(fields: [challenge_id], references: [id])
  challenge_id String    @unique
  answer       String
  created_at   DateTime  @default(now())
}

model Pelanggaran {
  id             String              @id @default(uuid())
  judul          String
  sender_name    String
  sender_ktm_url String
  candidate      Candidate           @relation(fields: [candidate_id], references: [id])
  candidate_id   String
  keterangan     String
  bukti_url      String
  progress       ResponsePelanggaran @default(ON_REVIEW)
  created_at     DateTime            @default(now())
}

model Vote {
  id           String        @id @default(uuid())
  voter        User          @relation(fields: [voter_id], references: [id])
  voter_id     String
  candidate    Candidate     @relation(fields: [candidate_id], references: [id])
  candidate_id String
  rank         Int
  type         CandidateType
  created_at   DateTime      @default(now())

  @@unique([candidate_id, voter_id])
  @@unique([voter_id, rank, type])
}

model TopikDebat {
  id             String   @id @default(uuid())
  nama           String
  sender_name    String
  sender_ktm_url String
  lembaga        String?
  created_at     DateTime @default(now())
}
